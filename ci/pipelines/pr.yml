update-status-commands:
  update-status-base: &update-status-base
    put: update-status
    resource: pull-request
    get_params:
      skip_download: true

  update-status-params-base: &update-status-params-base
    path: src
    context: 'pr'

  update-status-pending: &update-status-pending
    <<: *update-status-base
    params:
      <<: *update-status-params-base
      status: pending

  update-status-failure: &update-status-failure
    <<: *update-status-base
    params:
      <<: *update-status-params-base
      status: failure

  update-status-success: &update-status-success
    <<: *update-status-base
    params:
      <<: *update-status-params-base
      status: success

groups:
- name: pr
  jobs:
  - lint & test

- name: self-update
  jobs:
  - self-update

resource_types:
- name: pull-request
  type: registry-image
  source:
    repository: teliaoss/github-pr-resource

resources:
  - name: tech-ops
    type: git
    source:
      uri: https://github.com/alphagov/tech-ops.git

  - name: govwifi-database-backup
    type: git
    source:
      uri: https://github.com/alphagov/govwifi-database-backup.git

  - name: pull-request
    type: pull-request
    check_every: 1m
    source:
      repository: alphagov/govwifi-database-backup
      access_token: ((github-access-token))

  - name: runner
    # See https://github.com/alphagov/govwifi-concourse-runner for a reference dockerfile
    # readonly_private_ecr_repo_url is provided by the hosted Concourse
    type: docker-image
    source:
      repository: "((readonly_private_ecr_repo_url))"
      tag: concourse-runner-latest

  - name: python-image
    # set these to align with docker-compose.yml files, to prefetch + cache docker images
    type: registry-image
    source:
      repository: python
      tag: '3-alpine'

jobs:
  - name: self-update
    serial: true
    plan:
    - get: tech-ops
      params:
        submodules: none
    - get: govwifi-database-backup
      trigger: true
    - task: set-pipelines
      file: tech-ops/ci/tasks/self-updating-pipeline.yaml
      input_mapping: {repository: govwifi-database-backup}
      params:
        CONCOURSE_TEAM: govwifi
        CONCOURSE_PASSWORD: ((readonly_local_user_password))
        PIPELINE_PATH: ci/pipelines/pr.yml
        PIPELINE_NAME: database-backup-pr

  - name: lint & test
    interruptible: true
    # force people to use new git commits to rerun PRs
    disable_manual_trigger: true
    plan:
      - aggregate:
        - do:
          - get: src
            resource: pull-request
            trigger: true
            version: every
          - <<: *update-status-pending

        # fetch each image and place in the docker-cache directory
        - get: 'docker-cache/python-image'
          resource: python-image
          params: {format: oci}

        - get: runner

      # used to avoid building multiple times down the road
      - task: pre-build
        privileged: true
        image: runner
        file: src/ci/tasks/pre-build.yml

      - aggregate:
        - task: lint
          privileged: true
          image: runner
          file: src/ci/tasks/lint.yml
        - task: test
          privileged: true
          image: runner
          file: src/ci/tasks/test.yml

    on_failure:
      do:
        - <<: *update-status-failure
    on_success:
      do:
        - <<: *update-status-success
        